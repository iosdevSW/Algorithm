{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red31\green31\blue36;\red252\green95\blue163;
\red65\green161\blue192;\red208\green168\blue255;\red208\green191\blue105;\red108\green121\blue134;\red161\green103\blue230;
}
{\*\expandedcolortbl;;\csgenericrgb\c100000\c100000\c100000\c85000;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c98839\c37355\c63833;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c63137\c40392\c90196;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \
\cf4 import\cf2  Foundation\
\
\cf4 func\cf2  \cf5 solution\cf2 (\cf5 _\cf2  brown:\cf6 Int\cf2 , \cf5 _\cf2  yellow:\cf6 Int\cf2 ) -> [\cf6 Int\cf2 ] \{\
    \cf4 var\cf2  array = [(\cf6 Int\cf2 ,\cf6 Int\cf2 )]()\
    \
    \cf4 for\cf2  height \cf4 in\cf2  \cf7 1\cf2 ...yellow \{\
        \cf4 if\cf2  yellow % height != \cf7 0\cf2  \{ \cf4 continue\cf2  \} \cf8 // 
\f1 \'b3\'aa\'b4\'a9\'be\'ee\'b6\'b3\'be\'ee\'c1\'fa
\f0  
\f1 \'b0\'e6\'bf\'ec\'b8\'b8
\f0  
\f1 \'b0\'e8\'bb\'ea
\f0 \cf2 \
        \cf4 let\cf2  width = yellow / height\
        \
        \cf4 if\cf2  width < height \{ \cf4 break\cf2  \} \cf8 // 
\f1 \'bc\'bc\'b7\'ce\'c0\'c7
\f0  
\f1 \'b1\'e6\'c0\'cc\'b0\'a1
\f0  
\f1 \'b4\'f5
\f0  
\f1 \'b1\'e6\'b8\'e9
\f0  
\f1 \'b8\'d8\'c3\'e3
\f0 \cf2 \
        \
        array.\cf9 append\cf2 ((width,height)) \cf8 // yellow
\f1 \'c0\'c7
\f0  
\f1 \'b0\'b3\'bc\'f6\'b7\'ce
\f0  
\f1 \'b0\'a1\'b4\'c9\'c7\'d1
\f0  
\f1 \'b8\'f0\'b5\'e7
\f0  
\f1 \'c1\'f7\'bb\'e7\'b0\'a2\'c7\'fc
\f0  
\f1 \'b9\'e8\'bf\'ad
\f0 \cf2 \
    \}\
    \
    \cf4 var\cf2  result = [\cf6 Int\cf2 ]() \cf8 // 
\f1 \'b0\'e1\'b0\'fa\'b8\'a6
\f0  
\f1 \'b4\'e3\'c0\'bb
\f0  
\f1 \'b9\'e8\'bf\'ad
\f0 \cf2 \
    \
    \cf4 for\cf2  rectangle \cf4 in\cf2  array \{\
        \cf4 let\cf2  (width,height) = rectangle\
        \cf4 if\cf2  (width+\cf7 2\cf2 ) * \cf7 2\cf2  + (height*\cf7 2\cf2 ) == brown \{ \cf8 // 
\f1 \'b0\'a1\'b7\'ce
\f0  
\f1 \'be\'e7
\f0  
\f1 \'bf\'b7\'c0\'c7
\f0  +2
\f1 \'b0\'b3\'b8\'a6
\f0  
\f1 \'c0\'a7
\f0  
\f1 \'be\'c6\'b7\'a1\'b7\'ce
\f0  
\f1 \'c0\'d6\'c0\'b8\'b9\'c7\'b7\'ce
\f0  *2
\f1 \'b0\'b3
\f0  + 
\f1 \'b3\'f4\'c0\'cc
\f0  * 
\f1 \'be\'e7
\f0  
\f1 \'bf\'b7\'c0\'cc\'b9\'c7\'b7\'ce
\f0  *2
\f1 \'b0\'b3
\f0 \cf2 \
            result = [width+\cf7 2\cf2 ,height+\cf7 2\cf2 ] \cf8 // 
\f1 \'c5\'d7\'b5\'ce\'b8\'ae
\f0  
\f1 \'be\'e7\'bf\'b7\'c0\'b8\'b7\'ce
\f0  
\f1 \'b0\'a1\'b7\'ce\'b7\'ce
\f0  +2 
\f1 \'c0\'a7
\f0  
\f1 \'be\'c6\'b7\'a1\'b7\'ce
\f0  
\f1 \'bc\'bc\'b7\'ce\'b7\'ce
\f0  +2 
\f1 \'b8\'b8\'c5\'ad
\f0  
\f1 \'b4\'c3\'be\'ee\'b3\'b2
\f0 .\cf2 \
        \}\
    \}\
    \
    \cf4 return\cf2  result\
\}}