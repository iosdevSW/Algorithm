{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red161\green103\blue230;\red161\green103\blue230;\red252\green106\blue93;
\red208\green191\blue105;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c98912\c41558\c36568;
\csgenericrgb\c81498\c74939\c41233;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 import\cf4  Foundation\
\
\cf2 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  files:[\cf6 String\cf4 ]) -> [\cf7 String\cf4 ] \{\
    \cf2 var\cf4  array = [[\cf7 String\cf4 ]]()\
    \cf2 for\cf4  file \cf2 in\cf4  files \{\
        \cf2 let\cf4  number = file.\cf8 split\cf4 (\cf8 whereSeparator\cf4 : \{!$0.\cf7 isNumber\cf4 \}).\cf8 map\cf4 \{\cf6 String\cf4 ($0)\}.\cf8 first\cf4 !\
        \cf2 var\cf4  temp = file.\cf8 replacingOccurrences\cf4 (\cf8 of\cf4 : number, \cf8 with\cf4 : \cf9 "*"\cf4 )\
        \cf2 let\cf4  split = temp.\cf8 split\cf4 (\cf8 separator\cf4 : \cf9 "*"\cf4 ).\cf8 map\cf4 \{\cf6 String\cf4 ($0)\}\
        \
        \cf2 let\cf4  head = split[\cf10 0\cf4 ].filter \{ !$0.\cf7 isNumber\cf4 \}\
        \
        \cf2 if\cf4  split.\cf7 count\cf4  > \cf10 1\cf4  \{\
            array.\cf8 append\cf4 ([head,number,split[\cf10 1\cf4 ]])\
        \}\cf2 else\cf4  \{\
            array.\cf8 append\cf4 ([head,number,\cf9 ""\cf4 ])\
        \}\
    \}\
    \cf2 let\cf4  sortedArray = array.\cf8 sorted\cf4 ()\{\
        \cf2 let\cf4  compare = $0[\cf10 0\cf4 ].\cf8 compare\cf4 ($1[\cf10 0\cf4 ], \cf8 options\cf4 : .\cf7 caseInsensitive\cf4 )\
        \cf2 if\cf4  compare ==  ComparisonResult.orderedAscending\{\
            \cf2 return\cf4  \cf2 true\cf4 \
        \}\cf2 else\cf4  \cf2 if\cf4  compare == ComparisonResult.orderedSame\{\
            \cf2 let\cf4  numberCompare = $0[\cf10 1\cf4 ].\cf8 compare\cf4 ($1[\cf10 1\cf4 ], \cf8 options\cf4 : .\cf7 numeric\cf4 )\
            \cf2 if\cf4  numberCompare == ComparisonResult.orderedAscending \{\
                \cf2 return\cf4  \cf2 true\cf4 \
            \}\
        \}\
        \cf2 return\cf4  \cf2 false\cf4 \
    \}\
    \
    \cf2 var\cf4  result = [\cf7 String\cf4 ]()\
    \cf2 for\cf4  arr \cf2 in\cf4  sortedArray \{\
        result.\cf8 append\cf4 (arr.\cf8 joined\cf4 ())\
    \}\
    \
    \cf2 return\cf4  result\
\}\
\
//
\f1 \'c5\'d7\'bd\'ba\'c6\'ae
\f0  
\f1 \'c4\'c9\'c0\'cc\'bd\'ba
\f0  2
\f1 \'b0\'b3
\f0  
\f1 \'c6\'b2\'b8\'b2
\f0 .. 
\f1 \'c0\'cc\'c0\'af
\f0  
\f1 \'b8\'f0\'b8\'a3\'b0\'da\'b4\'d9
\f0  
\f1 \'a4\'d0\'a4\'d0 -> \'b4\'d9\'bd\'c3 \'c7\'ae\'be\'ee \'ba\'bc \'b0\'cd
\f0 \
}