{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red161\green103\blue230;\red108\green121\blue134;\red161\green103\blue230;
\red252\green106\blue93;\red208\green191\blue105;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c63137\c40392\c90196;
\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c81498\c74939\c41233;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 import\cf4  Foundation\
\
\cf2 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  files:[\cf6 String\cf4 ]) -> [\cf7 String\cf4 ] \{\
    \cf2 var\cf4  array = [[\cf7 String\cf4 ]]()\
    \
    \cf8 //
\f1 \'ba\'af\'c8\'af
\f0  head , number, tail 
\f1 \'b3\'aa\'b4\'b2
\f0  
\f1 \'b4\'e3\'b1\'e2
\f0 \cf4 \
    \cf2 for\cf4  file \cf2 in\cf4  files \{\
        \cf2 let\cf4  number = file.\cf9 split\cf4 (\cf9 whereSeparator\cf4 : \{!$0.\cf7 isNumber\cf4 \}).\cf9 map\cf4 \{\cf6 String\cf4 ($0)\}.\cf9 first\cf4 !\
        \cf2 var\cf4  temp = file.\cf9 replacingOccurrences\cf4 (\cf9 of\cf4 : number, \cf9 with\cf4 : \cf10 "*"\cf4 )\
        \cf2 let\cf4  split = temp.\cf9 split\cf4 (\cf9 separator\cf4 : \cf10 "*"\cf4 ).\cf9 map\cf4 \{\cf6 String\cf4 ($0)\}\
        \cf2 let\cf4  head = split[\cf11 0\cf4 ]\
        \cf2 let\cf4  tail = file.\cf9 replacingOccurrences\cf4 (\cf9 of\cf4 : head + number, \cf9 with\cf4 : \cf10 ""\cf4 )\
        \
        array.\cf9 append\cf4 ([head,number,tail])\
    \}\
    \
    \cf8 //
\f1 \'c1\'a4\'b7\'c4
\f0 \cf4 \
    \cf2 let\cf4  sortedArray = array.\cf9 sorted\cf4 ()\{\
        \cf2 let\cf4  compare = $0[\cf11 0\cf4 ].\cf9 compare\cf4 ($1[\cf11 0\cf4 ], \cf9 options\cf4 : .\cf7 caseInsensitive\cf4 )\
        \cf2 if\cf4  compare ==  ComparisonResult.orderedAscending\{\
            \cf2 return\cf4  \cf2 true\cf4 \
        \}\cf2 else\cf4  \cf2 if\cf4  compare == ComparisonResult.orderedSame\{\
            \cf2 let\cf4  numberCompare = $0[\cf11 1\cf4 ].\cf9 compare\cf4 ($1[\cf11 1\cf4 ], \cf9 options\cf4 : .\cf7 numeric\cf4 )\
            \cf2 if\cf4  numberCompare == ComparisonResult.orderedAscending \{\
                \cf2 return\cf4  \cf2 true\cf4 \
            \}\
        \}\
        \cf2 return\cf4  \cf2 false\cf4 \
    \}\
    \
    \cf2 var\cf4  result = [\cf7 String\cf4 ]()\
    \cf2 for\cf4  arr \cf2 in\cf4  sortedArray \{\
        result.\cf9 append\cf4 (arr.\cf9 joined\cf4 ())\
    \}\
    \
    \cf2 return\cf4  result\
\}\
\

\f1 \'b2\'bf\'b8\'ae\'ba\'ce\'ba\'d0\'b9\'ae\'c1\'a6 
\f0 100% 
\f1 \'c7\'d8\'b0\'e1!!  \'c8\'bf\'c0\'b2\'bc\'ba \'c2\'c9\'b1\'dd \'b3\'b7\'c0\'bd\
-> \'c1\'a4\'b1\'d4\'c7\'a5\'c7\'f6\'bd\'c4 \'c3\'a3\'be\'c6\'ba\'b8\'c0\'da
\f0 \
}