{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red108\green121\blue134;\red31\green31\blue36;\red255\green255\blue255;
\red252\green95\blue163;\red65\green161\blue192;\red208\green168\blue255;\red252\green106\blue93;\red208\green191\blue105;
\red161\green103\blue230;\red103\green183\blue164;\red161\green103\blue230;\red146\green161\blue177;}
{\*\expandedcolortbl;;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c81498\c74939\c41233;
\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c57255\c63137\c69412;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 
\f1 \'b3\'bb
\f0  
\f1 \'c7\'ae\'c0\'cc
\f0 \cf4 \
\cf5 import\cf4  Foundation\
\
\cf5 var\cf4  \cf6 op\cf4  = [[\cf7 String\cf4 ]]() \cf2 // 
\f1 \'bf\'ac\'bb\'ea\'c0\'da
\f0  
\f1 \'bc\'f8\'bf\'ad
\f0  
\f1 \'c0\'fa\'c0\'e5
\f0  
\f1 \'ba\'af\'bc\'f6
\f0 \cf4 \
\
\cf5 func\cf4  \cf6 solution\cf4 (\cf6 _\cf4  numbers:[\cf7 Int\cf4 ], \cf6 _\cf4  target:\cf7 Int\cf4 ) -> \cf7 Int\cf4  \{\
    \cf5 let\cf4  operators = [\cf8 "-"\cf4 ,\cf8 "+"\cf4 ]\
    \
    \cf5 var\cf4  count = \cf9 0\cf4  \cf2 // 
\f1 \'c4\'ab\'bf\'ee\'c6\'ae
\f0  
\f1 \'b0\'e1\'b0\'fa\'b0\'aa
\f0  
\f1 \'c0\'fa\'c0\'e5
\f0  
\f1 \'ba\'af\'bc\'f6
\f0 \cf4 \
    \
    dfs(arr: operators, count: numbers.\cf10 count\cf4 , visited: [])\
    \
    \cf5 for\cf4  arr \cf5 in\cf4  \cf11 op\cf4  \{ \cf2 // 
\f1 \'bc\'f8\'bf\'ad\'c1\'fd\'c7\'d5
\f0  
\f1 \'b9\'dd\'ba\'b9
\f0 \cf4 \
        \cf5 var\cf4  sum = \cf9 0\cf4  \cf2 // 
\f1 \'c3\'d1
\f0  
\f1 \'c7\'d5
\f0 \cf4 \
        \cf5 for\cf4  (idx,oper) \cf5 in\cf4  arr.\cf12 enumerated\cf4 () \{\
            \cf5 if\cf4  oper == \cf8 "-"\cf4  \{\
                sum -= numbers[idx]\
            \}\cf5 else\cf4  \{\
                sum += numbers[idx]\
            \}\
        \}\
        \cf5 if\cf4  sum == target \{\
            count += \cf9 1\cf4 \
        \}\
    \}\
    \
    \cf5 return\cf4  count\
\}\
\
\cf5 func\cf4  \cf6 dfs\cf4 (\cf6 arr\cf4 : [\cf7 String\cf4 ], \cf6 count\cf4 : \cf7 Int\cf4 , \cf6 visited\cf4 :[\cf7 String\cf4 ]) \{\
    \cf5 var\cf4  visited = visited\
    \
    \cf5 if\cf4  count == \cf9 0\cf4  \{ \cf2 // 
\f1 \'b0\'b3\'bc\'f6\'b8\'b8\'c5\'ad
\f0  
\f1 \'bb\'cc\'c0\'b8\'b8\'e9
\f0  
\f1 \'c1\'be\'b7\'e1
\f0 \cf4 \
        \cf11 op\cf4 .\cf12 append\cf4 (visited)\
        \cf5 return\cf4 \
    \}\
    \
    \cf5 for\cf4  oper \cf5 in\cf4  arr \{\
        visited.\cf12 append\cf4 (oper)\
        dfs(arr: arr, count: count - \cf9 1\cf4 , visited: visited)\
        visited.\cf12 popLast\cf4 ()\
    \}\
\}\
\cf2 // 
\f1 \'c1\'df\'ba\'b9\'bc\'f8\'bf\'ad\'c0\'cc\'bf\'eb
\f0  -> 
\f1 \'bd\'c3\'b0\'a3
\f0  
\f1 \'ba\'b9\'c0\'e2\'b5\'b5
\f0  
\f1 \'b3\'ca\'b9\'ab
\f0  
\f1 \'c5\'ad
\f0  
\f1 \'c8\'bf\'c0\'b2\'bc\'ba
\f0  
\f1 \'b3\'b7\'c0\'bd
\f0 \cf4 \
\
\cf2 // 
\f1 \'bd\'c3\'b0\'a3\'ba\'b9\'c0\'e2\'b5\'b5
\f0  
\f1 \'c7\'d8\'b0\'e1
\f0  -> DFS
\f1 \'b8\'b8
\f0  
\f1 \'c0\'cc\'bf\'eb
\f0 \cf4 \
\
\cf5 import\cf4  Foundation\
\
\cf5 func\cf4  \cf6 searchTarget\cf4 (\cf6 number\cf4 : [\cf7 Int\cf4 ], \cf6 depth\cf4 : \cf7 Int\cf4 , \cf6 target\cf4 : \cf7 Int\cf4 , \cf6 value\cf4 : \cf7 Int\cf4 , \cf6 answer\cf4 : \cf5 inout\cf4  \cf7 Int\cf4 ) \{\
\
    \cf2 // \cf13 MARK: - 
\f1 \'bb\'e7\'bf\'eb\'c7\'d2
\f0  
\f1 \'bc\'f6
\f0  
\f1 \'c0\'d6\'b4\'c2
\f0  
\f1 \'bc\'fd\'c0\'da\'b0\'a1
\f0  
\f1 \'b4\'e3\'b1\'e4
\f0  
\f1 \'b9\'e8\'bf\'ad
\f0  numbers, 
\f1 \'c5\'b8\'b0\'d9
\f0  
\f1 \'b3\'d1\'b9\'f6
\f0  target
\f1 \'c0\'cc
\f0  
\f1 \'b8\'c5\'b0\'b3\'ba\'af\'bc\'f6\'b7\'ce
\f0  
\f1 \'c1\'d6\'be\'ee\'c1\'fa
\f0  
\f1 \'b6\'a7
\f0  
\f1 \'bc\'fd\'c0\'da\'b8\'a6
\f0  
\f1 \'c0\'fb\'c0\'fd\'c8\'f7
\f0  
\f1 \'b4\'f5\'c7\'cf\'b0\'ed
\f0  
\f1 \'bb\'a9\'bc\'ad
\f0  
\f1 \'c5\'b8\'b0\'d9
\f0  
\f1 \'b3\'d1\'b9\'f6\'b8\'a6
\f0  
\f1 \'b8\'b8\'b5\'e5\'b4\'c2
\f0  
\f1 \'b9\'e6\'b9\'fd\'c0\'c7
\f0  
\f1 \'bc\'f6\'b8\'a6
\f0  return 
\f1 \'c7\'cf\'b5\'b5\'b7\'cf
\f0  solution 
\f1 \'c7\'d4\'bc\'f6\'b8\'a6
\f0  
\f1 \'c0\'db\'bc\'ba\'c7\'d8\'c1\'d6\'bc\'bc\'bf\'e4
\f0 .\cf4 \
    \cf5 if\cf4  depth >= number.\cf10 count\cf4  \{\
        \cf5 if\cf4  target == value \{ answer = answer + \cf9 1\cf4  \}\
        \cf5 return\cf4 \
    \}\
\
    \cf2 // \cf13 MARK: - 
\f1 \'c0\'cc
\f0  
\f1 \'bc\'f6\'b8\'a6
\f0  
\f1 \'c0\'fb\'c0\'fd\'c8\'f7
\f0  
\f1 \'b4\'f5\'c7\'cf\'b0\'c5\'b3\'aa
\f0  
\f1 \'bb\'a9\'bc\'ad
\f0  
\f1 \'c5\'b8\'b0\'d9
\f0  
\f1 \'b3\'d1\'b9\'f6\'b8\'a6
\f0  
\f1 \'b8\'b8\'b5\'e9\'b7\'c1\'b0\'ed
\f0  
\f1 \'c7\'d5\'b4\'cf\'b4\'d9
\f0 .\cf4 \
    searchTarget(number: number, depth: depth + \cf9 1\cf4 , target: target, value: value + number[depth], answer: &answer)\
    searchTarget(number: number, depth: depth + \cf9 1\cf4 , target: target, value: value - number[depth], answer: &answer)\
\}\
\
\cf5 func\cf4  \cf6 solution\cf4 (\cf6 _\cf4  numbers:[\cf7 Int\cf4 ], \cf6 _\cf4  target:\cf7 Int\cf4 ) -> \cf7 Int\cf4  \{\
\
    \cf5 var\cf4  answer = \cf9 0\cf4 \
    searchTarget(number: numbers, depth: \cf9 0\cf4 , target: target, value: \cf9 0\cf4 , answer: &answer)\
\
    \cf5 return\cf4  answer\
\}\
\
\
\
}