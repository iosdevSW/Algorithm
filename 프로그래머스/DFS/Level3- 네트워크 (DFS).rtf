{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red108\green121\blue134;\red161\green103\blue230;\red208\green191\blue105;
\red103\green183\blue164;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c81498\c74939\c41233;
\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c63232\c40219\c90115;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 import\cf4  Foundation\
\
\cf2 var\cf4  \cf5 graph\cf4  = [\cf6 Int\cf4 :[\cf6 Int\cf4 ]]()\
\cf2 var\cf4  \cf5 visited\cf4  = [\cf6 Int\cf4 ]()\
\cf2 var\cf4  \cf5 set\cf4  = \cf6 Set\cf4 <[\cf6 Int\cf4 ]>()\
\cf2 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  n:\cf6 Int\cf4 , \cf5 _\cf4  computers:[[\cf6 Int\cf4 ]]) -> \cf6 Int\cf4  \{\
    \
    \cf7 //
\f1 \'c0\'d4\'b7\'c2\'b0\'aa
\f0  
\f1 \'b5\'f1\'bc\'c5\'b3\'ca\'b8\'ae\'bf\'a1
\f0  
\f1 \'b4\'e3\'b1\'e2
\f0 \cf4 \
    \cf2 for\cf4  (comIdx,network) \cf2 in\cf4  computers.\cf8 enumerated\cf4 () \{\
        \cf2 for\cf4  (idx,com) \cf2 in\cf4  network.\cf8 enumerated\cf4 ()\{\
            \cf2 if\cf4  com == \cf9 1\cf4  && idx != comIdx \{  \
                \cf2 if\cf4  \cf2 var\cf4  childNodes = \cf10 graph\cf4 [comIdx+\cf9 1\cf4 ] \{ \cf7 // 
\f1 \'ba\'ce\'b8\'f0\'b3\'eb\'b5\'e5
\f0 \cf4 \
                    childNodes.\cf8 append\cf4 (idx+\cf9 1\cf4 )\cf7 // 
\f1 \'c0\'da\'bd\'c4\'b3\'eb\'b5\'e5
\f0  
\f1 \'c3\'df\'b0\'a1
\f0 \cf4 \
                    \cf10 graph\cf4 [comIdx+\cf9 1\cf4 ] = childNodes\
                \}\cf2 else\cf4  \{\
                    \cf10 graph\cf4 [comIdx+\cf9 1\cf4 ] = [idx+\cf9 1\cf4 ]\
                \}\
            \}\
        \}\
    \}\
    \cf7 //
\f1 \'c1\'df\'ba\'b9\'b5\'c7\'b4\'c2
\f0  
\f1 \'b9\'e8\'bf\'ad
\f0  
\f1 \'c1\'a6\'b0\'c5\'c7\'d8\'bc\'ad
\f0  
\f1 \'bc\'ad\'b7\'ce
\f0  
\f1 \'b4\'d9\'b8\'a5
\f0  
\f1 \'c6\'ae\'b8\'ae\'b8\'b8
\f0  
\f1 \'b3\'b2\'b1\'e2\'b1\'e2
\f0 \cf4 \
    \cf2 for\cf4  comNum \cf2 in\cf4  \cf9 1\cf4 ...n \{\
        \cf10 visited\cf4  = [\cf6 Int\cf4 ]() \cf7 // 
\f1 \'c3\'ca\'b1\'e2\'c8\'ad
\f0 \cf4 \
        dfs(start: comNum)\
        \
        \cf10 set\cf4 .\cf8 insert\cf4 (\cf10 visited\cf4 .\cf8 sorted\cf4 ())\
    \}\
    \
    \cf2 return\cf4  \cf10 set\cf4 .\cf11 count\cf4 \
\}\
\cf7 // dfs
\f1 \'c5\'bd\'bb\'f6
\f0 \cf4 \
\cf2 func\cf4  \cf5 dfs\cf4 (\cf5 start\cf4 : \cf6 Int\cf4 ) \{\
    \cf10 visited\cf4 .\cf8 append\cf4 (start) \cf7 // 
\f1 \'b9\'e6\'b9\'ae
\f0  
\f1 \'c3\'bc\'c5\'a9
\f0 \cf4 \
    \
    \cf2 guard\cf4  \cf2 let\cf4  graph = \cf10 graph\cf4 [start] \cf2 else\cf4  \{ \cf2 return\cf4  \}\
    \
    \cf2 for\cf4  node \cf2 in\cf4  graph \{ \cf7 // 
\f1 \'c0\'da\'bd\'c4\'b3\'eb\'b5\'e5
\f0  
\f1 \'c3\'bc\'c5\'a9
\f0 \cf4 \
        \
        \cf2 if\cf4  !\cf10 visited\cf4 .\cf8 contains\cf4 (node) \{ \cf7 // 
\f1 \'c1\'df\'ba\'b9
\f0  
\f1 \'c3\'bc\'c5\'a9
\f0 \cf4 \
            dfs(start: node) \cf7 // 
\f1 \'c0\'da\'bd\'c4\'b3\'eb\'b5\'e5
\f0  
\f1 \'c0\'e7\'b1\'cd\'c8\'a3\'c3\'e2
\f0 \cf4 \
            \
        \}\
    \}\
\}\
\
\
\
}