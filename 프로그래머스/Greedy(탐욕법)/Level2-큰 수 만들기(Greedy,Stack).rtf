{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red161\green103\blue230;\red161\green103\blue230;\red208\green191\blue105;
\red252\green106\blue93;\red108\green121\blue134;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c81498\c74939\c41233;
\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c42394\c47462\c52518;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 import\cf4  Foundation\
\
\cf2 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  number:\cf6 String\cf4 , \cf5 _\cf4  k:\cf6 Int\cf4 ) -> \cf7 String\cf4  \{\
    \cf2 var\cf4  numbers = number.\cf8 map\cf4 \{\cf6 String\cf4 ($0)\}\
    \cf2 var\cf4  reStartPoint = \cf9 0\cf4 \
    \
    \cf2 for\cf4  _ \cf2 in\cf4  \cf9 1\cf4 ...k \{\
        \cf2 for\cf4  idx \cf2 in\cf4  reStartPoint..<numbers.\cf7 count\cf4  \{\
            \cf2 if\cf4  numbers[idx] == \cf10 \cb3 "9"\cf4 \cb3  \{ \cf2 continue\cf4  \}\
            \cf2 if\cf4  idx == numbers.\cf7 count\cf4 -\cf9 1\cf4  \{\cf11 \cb3 // 
\f1 \'b8\'b6\'c1\'f6\'b8\'b7
\f0  
\f1 \'c0\'ce\'b5\'a6\'bd\'ba\'b8\'e9
\f0  
\f1 \'bb\'e8\'c1\'a6
\f0 \cf4 \cb3 \
                numbers.\cf8 remove\cf4 (\cf8 at\cf4 : idx)\
                \cf2 if\cf4  idx != \cf9 0\cf4  \{ reStartPoint = idx - \cf9 1\cf4  \}\
               \
                \cf2 break\cf4  \cf11 \cb3 // 
\f1 \'bb\'e8\'c1\'a6
\f0  
\f1 \'c8\'c4
\f0  
\f1 \'c0\'fc
\f0  
\f1 \'c0\'ce\'b5\'a6\'bd\'ba
\f0  
\f1 \'ba\'ce\'c5\'cd
\f0  
\f1 \'b9\'dd\'ba\'b9
\f0 \cf4 \cb3 \
            \}\
            \
            \cf2 if\cf4  numbers[idx] >= numbers[idx+\cf9 1\cf4 ] \{\
                \cf2 continue\cf4  \cf11 \cb3 //
\f1 \'b5\'da\'bf\'a1
\f0  
\f1 \'bc\'fd\'c0\'da\'ba\'b8\'b4\'d9
\f0  
\f1 \'be\'d5\'bf\'a1
\f0  
\f1 \'bc\'fd\'c0\'da\'b0\'a1
\f0  
\f1 \'c5\'a9\'b8\'e9
\f0  
\f1 \'b4\'d9\'c0\'bd
\f0  
\f1 \'b9\'dd\'ba\'b9
\f0 \cf4 \cb3 \
            \}\cf2 else\cf4  \{\
                numbers.\cf8 remove\cf4 (\cf8 at\cf4 : idx)\
                \cf2 if\cf4  idx != \cf9 0\cf4  \{ reStartPoint = idx - \cf9 1\cf4  \}\
                \
                \cf2 break\cf4  \cf11 \cb3 // 
\f1 \'bb\'e8\'c1\'a6
\f0  
\f1 \'c8\'c4
\f0  
\f1 \'c0\'fc
\f0  
\f1 \'c0\'ce\'b5\'a6\'bd\'ba
\f0  
\f1 \'ba\'ce\'c5\'cd
\f0  
\f1 \'b9\'dd\'ba\'b9
\f0 \cf4 \cb3 \
            \}\
        \}\
    \}\
    \
    \cf2 return\cf4  numbers.\cf8 joined\cf4 ()\
\}\
//
\f1  10\'b9\'f8 \'c5\'d7\'bd\'ba\'c6\'ae \'c4\'c9\'c0\'cc\'bd\'ba \'bd\'c3\'b0\'a3\'c3\'ca\'b0\'fa! 2\'c1\'df for\'b9\'ae \'b6\'a7\'b9\'ae\'c0\'ce\'b0\'a1 \'bd\'cd\'b4\'d9..
\f0 \
\

\f1 // 2\'b9\'f8\'c2\'b0 \'c7\'ae\'c0\'cc Stack\'c0\'cc\'bf\'eb
\f0 \
\cf2 import\cf4  Foundation\
\
\cf2 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  number:\cf6 String\cf4 , \cf5 _\cf4  k:\cf6 Int\cf4 ) -> \cf7 String\cf4  \{\
    \cf2 var\cf4  numbers = number.\cf8 map\cf4 \{\cf6 Int\cf4 (\cf6 String\cf4 ($0))!\}\
    \cf2 var\cf4  stacks = [\cf6 Int\cf4 ]()\
    \cf2 var\cf4  removeCount = \cf9 0\cf4 \
    \
    \cf2 for\cf4  idx \cf2 in\cf4  \cf9 0\cf4 ..<numbers.\cf7 count\cf4  \{\
        \cf2 let\cf4  num = numbers[idx] \cf11 \cb3 // 
\f1 \'bb\'f0\'c0\'d4\'c7\'d2
\f0  
\f1 \'bc\'fd\'c0\'da
\f0 \cf4 \cb3 \
        \
        \cf11 \cb3 // 
\f1 \'bd\'ba\'c5\'c3\'c0\'cc
\f0  
\f1 \'ba\'f1\'be\'ee\'c0\'d6\'c1\'f6
\f0  
\f1 \'be\'ca\'b0\'ed
\f0  
\f1 \'b8\'b6\'c1\'f6\'b8\'b7
\f0  
\f1 \'bc\'fd\'c0\'da\'ba\'b8\'b4\'d9
\f0  
\f1 \'c0\'db\'c0\'b8\'b8\'e9
\f0  
\f1 \'bb\'e8\'c1\'a6
\f0 \cf4 \cb3 \
        \cf11 \cb3 // (
\f1 \'be\'d5
\f0  
\f1 \'bc\'fd\'c0\'da\'b0\'a1
\f0  
\f1 \'c5\'a9\'b0\'c5\'b3\'aa
\f0 , 
\f1 \'bd\'ba\'c5\'c3\'c0\'cc
\f0  
\f1 \'ba\'f1\'b0\'c5\'b3\'aa
\f0 , 
\f1 \'c1\'a6\'b0\'c5\'c7\'d2
\f0  
\f1 \'b0\'b3\'bc\'f6
\f0  
\f1 \'c3\'a4\'bf\'ef\'b6\'a7\'b1\'ee\'c1\'f6
\f0  
\f1 \'b9\'dd\'ba\'b9
\f0 )\cf4 \cb3 \
        \cf2 while\cf4  !stacks.\cf7 isEmpty\cf4  && stacks.\cf7 last\cf4 ! < num && removeCount < k \{\
            stacks.\cf8 removeLast\cf4 ()\
            removeCount += \cf9 1\cf4 \
        \}\
        \
        stacks.\cf8 append\cf4 (num) \cf11 \cb3 // 
\f1 \'bd\'ba\'c5\'c3\'bf\'a1
\f0  
\f1 \'c3\'df\'b0\'a1
\f0 \cf4 \cb3 \
    \}\
    \
    \cf2 while\cf4  removeCount < k \{ \cf11 \cb3 // k
\f1 \'b0\'b3
\f0  
\f1 \'b4\'d9
\f0  
\f1 \'b8\'f8\'c1\'f6\'bf\'ee\'b0\'e6\'bf\'ec
\f0  
\f1 \'b5\'da\'bf\'a1\'bc\'ad\'ba\'ce\'c5\'cd
\f0  
\f1 \'c1\'a6\'b0\'c5
\f0 \cf4 \cb3 \
        stacks.\cf8 removeLast\cf4 ()\
        removeCount+=\cf9 1\cf4 \
    \}\
    \
    \cf2 return\cf4  stacks.\cf8 map\cf4 \{\cf6 String\cf4 ($0)\}.\cf8 joined\cf4 ()\
\}\
\
}