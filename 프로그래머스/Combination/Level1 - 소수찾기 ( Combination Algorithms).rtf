{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red208\green191\blue105;\red161\green103\blue230;\red103\green183\blue164;
\red108\green121\blue134;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c40538\c71705\c64209;
\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c63232\c40219\c90115;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab674
\pard\tx674\pardeftab674\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \cb3 import\cf4  Foundation\
\
\cf2 var\cf4  \cf5 sumArray\cf4 :[\cf6 Int\cf4 ] = [\cf6 Int\cf4 ]()\
\
\cf2 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  nums:[\cf6 Int\cf4 ]) -> \cf6 Int\cf4  \{\
    \cf2 var\cf4  count = \cf7 0\cf4 \
    combination(array: nums, selectCount:\cf7 3\cf4  , depth: \cf7 0\cf4 , selected: [])\
    \cf8 print\cf4 (\cf9 sumArray\cf4 )\
    \cf2 for\cf4  value \cf2 in\cf4  \cf9 sumArray\cf4  \{\
        count += isPrime(value)\
    \}\
\
    \cf2 return\cf4  count\
\}\
\cf10 // 
\f1 \'c1\'b6\'c7\'d5
\f0  
\f1 \'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2
\f0 \cf4 \
\cf2 func\cf4  \cf5 combination\cf4 (\cf5 array\cf4 : [\cf6 Int\cf4 ], \cf5 selectCount\cf4 : \cf6 Int\cf4 , \cf5 depth\cf4 : \cf6 Int\cf4 , \cf5 selected\cf4 : [\cf6 Int\cf4 ])\{\
    \cf2 if\cf4  selectCount == \cf7 0\cf4  \{ \cf10 // 
\f1 \'b4\'f5
\f0  
\f1 \'b0\'ed\'b8\'a6
\f0  
\f1 \'b0\'b3\'bc\'f6\'b0\'a1
\f0  0
\f1 \'c0\'cc\'b8\'e9
\f0  
\f1 \'c3\'e2\'b7\'c2
\f0 \cf4 \
        \cf9 sumArray\cf4 .\cf8 append\cf4 (selected.\cf8 reduce\cf4 (\cf7 0\cf4 )\{ $0 + $1 \})\
    \} \cf2 else\cf4  \cf2 if\cf4  depth == array.\cf11 count\cf4  \{  \cf10 // depth 
\f1 \'c1\'ef
\f0  
\f1 \'bb\'cc\'c0\'bb
\f0  
\f1 \'c0\'ce\'b5\'a6\'bd\'ba\'b0\'a1
\f0  
\f1 \'b9\'de\'c0\'ba
\f0  
\f1 \'b9\'e8\'bf\'ad\'c0\'c7
\f0  
\f1 \'c0\'ce\'b5\'a6\'bd\'ba\'b8\'a6
\f0  
\f1 \'c3\'ca\'b0\'fa\'c7\'cf\'b8\'e9
\f0  
\f1 \'c1\'df\'c1\'f6
\f0 .\cf4 \
        \cf2 return\cf4                         \cf10 // 
\f1 \'b9\'dd\'c8\'af\'b0\'aa
\f0  x\cf4 \
    \} \cf2 else\cf4  \{\
        \cf2 var\cf4  newSelected = selected\
        newSelected.\cf8 append\cf4 (array[depth])\
        \
        \cf10 // 
\f1 \'c7\'f6\'c0\'e7
\f0  
\f1 \'c0\'ce\'b5\'a6\'bd\'ba\'b8\'a6
\f0  
\f1 \'c3\'df\'b0\'a1\'c7\'cf\'b4\'c2
\f0  
\f1 \'b0\'e6\'bf\'ec
\f0 \cf4 \
        combination(array: array, selectCount: selectCount-\cf7 1\cf4 , depth: depth+\cf7 1\cf4 , selected: newSelected)\
        \
        \cf10 // 
\f1 \'c7\'f6\'c0\'e7
\f0  
\f1 \'c0\'ce\'b5\'a6\'bd\'ba
\f0 (depth)
\f1 \'b8\'a6
\f0  
\f1 \'c3\'df\'b0\'a1\'c7\'cf\'c1\'f6\'be\'ca\'b4\'c2
\f0  
\f1 \'b0\'e6\'bf\'ec
\f0 \cf4 \
        combination(array: array, selectCount: selectCount, depth: depth+\cf7 1\cf4 , selected: selected)\
    \}\
\}\
\
\cf2 func\cf4  \cf5 isPrime\cf4 (\cf5 _\cf4  num:\cf6 Int\cf4 )-> \cf6 Int\cf4 \{\
    \cf2 if\cf4  num < \cf7 1\cf4  \{\
        \cf2 return\cf4  \cf7 0\cf4 \
    \}\
    \cf2 for\cf4  number \cf2 in\cf4  \cf7 2\cf4 ..<num \{\
        \cf2 if\cf4  num % number == \cf7 0\cf4  \{\
            \cf2 return\cf4  \cf7 0\cf4 \
        \}\
    \}\
    \
    \cf2 return\cf4  \cf7 1\cf4 \
\}\
\
solution([\cf7 1\cf4 ,\cf7 2\cf4 ,\cf7 3\cf4 ,\cf7 4\cf4 ])\
\
\
}