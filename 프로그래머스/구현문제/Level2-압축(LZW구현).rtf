{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red252\green106\blue93;\red161\green103\blue230;\red108\green121\blue134;
\red161\green103\blue230;\red208\green191\blue105;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c42394\c47462\c52518;
\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c81498\c74939\c41233;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 import\cf4  CoreFoundation\
\cf2 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  msg:\cf6 String\cf4 ) -> [\cf6 Int\cf4 ] \{\
    \cf2 var\cf4  wordDictionary = [\
        \cf7 "A"\cf4 ,\cf7 "B"\cf4 ,\cf7 "C"\cf4 ,\cf7 "D"\cf4 ,\cf7 "E"\cf4 ,\cf7 "F"\cf4 ,\cf7 "G"\cf4 ,\cf7 "H"\cf4 ,\cf7 "I"\cf4 ,\cf7 "J"\cf4 ,\
        \cf7 "K"\cf4 ,\cf7 "L"\cf4 ,\cf7 "M"\cf4 ,\cf7 "N"\cf4 ,\cf7 "O"\cf4 ,\cf7 "P"\cf4 ,\cf7 "Q"\cf4 ,\cf7 "R"\cf4 ,\cf7 "S"\cf4 ,\cf7 "T"\cf4 ,\
        \cf7 "U"\cf4 ,\cf7 "V"\cf4 ,\cf7 "W"\cf4 ,\cf7 "X"\cf4 ,\cf7 "Y"\cf4 ,\cf7 "Z"\cf4 ,\
    ]\
    \cf2 var\cf4  answer = [\cf6 Int\cf4 ]()\
    \cf2 var\cf4  msg = msg\
    \
    \cf2 while\cf4  !msg.\cf8 isEmpty\cf4 \{ \cf9 // 
\f1 \'b8\'f0\'b5\'e7
\f0  
\f1 \'c0\'d4\'b7\'c2\'c0\'cc
\f0  
\f1 \'c3\'b3\'b8\'ae\'b5\'c9
\f0  
\f1 \'b6\'a7\'b1\'ee\'c1\'f6
\f0  
\f1 \'b9\'dd\'ba\'b9
\f0 \cf4 \
        \cf2 var\cf4  input = \cf7 ""\cf4 \
        \cf2 if\cf4  \cf2 let\cf4  first = msg.\cf10 first\cf4  \{ \cf9 // 
\f1 \'c3\'b9\'b9\'f8\'c2\'b0
\f0  
\f1 \'b9\'ae\'c0\'da
\f0  
\f1 \'b0\'cb\'bb\'f6
\f0 \cf4 \
            \cf9 // 
\f1 \'c3\'b9\'b9\'f8\'c2\'b0
\f0  
\f1 \'b9\'ae\'c0\'da\'b7\'ce
\f0  
\f1 \'bd\'c3\'c0\'db\'c7\'cf\'b4\'c2
\f0  
\f1 \'b9\'ae\'c0\'da
\f0  
\f1 \'bb\'e7\'c0\'fc\'bf\'a1\'bc\'ad
\f0  
\f1 \'c7\'ca\'c5\'cd\'b8\'b5\'c7\'cf\'b0\'ed
\f0  
\f1 \'b1\'e4
\f0  
\f1 \'b9\'ae\'c0\'da\'b8\'a6
\f0  
\f1 \'be\'d5\'c0\'b8\'b7\'ce
\f0  
\f1 \'c1\'a4\'b7\'c4
\f0 \cf4 \
            \cf2 let\cf4  filter = wordDictionary.\cf10 filter\cf4 \{ $0.\cf10 hasPrefix\cf4 (\cf6 String\cf4 (first))\}.\cf10 sorted\cf4 ()\{$0.\cf8 count\cf4  > $1.\cf8 count\cf4 \}\
            \cf9 // 
\f1 \'bb\'e7\'c0\'fc\'bf\'a1\'bc\'ad
\f0  
\f1 \'c0\'d4\'b7\'c2\'bf\'a1
\f0  
\f1 \'c7\'d8\'b4\'e7\'c7\'cf\'b4\'c2
\f0  
\f1 \'b0\'a1\'c0\'e5
\f0  
\f1 \'b1\'e4
\f0  
\f1 \'b9\'ae\'c0\'da\'bf\'ad
\f0  
\f1 \'c3\'a3\'b1\'e2
\f0 \cf4 \
            \cf2 for\cf4  value \cf2 in\cf4  filter \{\
                \cf2 if\cf4  msg.\cf10 hasPrefix\cf4 (value) \{\
                    input = value\
                    \cf2 break\cf4 \
                \}\
            \}\
            \cf2 for\cf4  _ \cf2 in\cf4  input \{ \cf9 // 
\f1 \'c0\'d4\'b7\'c2
\f0 w 
\f1 \'b9\'ae\'c0\'da\'bf\'ad\'bf\'a1\'bc\'ad
\f0  
\f1 \'c1\'a6\'b0\'c5
\f0 \cf4 \
                msg.\cf10 removeFirst\cf4 ()\
            \}\
            \cf9 //
\f1 \'bb\'e7\'c0\'fc
\f0  
\f1 \'bb\'f6\'c0\'ce\'b9\'f8\'c8\'a3
\f0  
\f1 \'c3\'e2\'b7\'c2
\f0 \cf4 \
            \cf2 let\cf4  idx = wordDictionary.\cf10 firstIndex\cf4 (\cf10 of\cf4 : input)!\
            answer.\cf10 append\cf4 (idx+\cf11 1\cf4 )\
            \
            \cf2 if\cf4  !msg.\cf8 isEmpty\cf4  \{ \cf9 //  
\f1 \'b4\'d9\'c0\'bd
\f0  
\f1 \'b9\'ae\'c0\'da\'bf\'ad\'c0\'cc
\f0  
\f1 \'b3\'b2\'be\'d2\'c0\'b8\'b8\'e9
\f0  w+c 
\f1 \'bb\'e7\'c0\'fc\'bf\'a1
\f0  
\f1 \'c3\'df\'b0\'a1
\f0 \cf4 \
                wordDictionary.\cf10 append\cf4 (input+\cf6 String\cf4 (msg.\cf10 first\cf4 !))\
            \}\
        \}\
    \}\
    \
    \cf2 return\cf4  answer\
\}\
}