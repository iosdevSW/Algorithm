{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red208\green191\blue105;\red108\green121\blue134;\red161\green103\blue230;
\red252\green106\blue93;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c63137\c40392\c90196;
\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c63232\c40219\c90115;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 import\cf4  Foundation\
\
\cf2 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  numbers:[\cf6 Int64\cf4 ]) -> [\cf6 Int64\cf4 ] \{\
    \cf2 var\cf4  result = [\cf6 Int64\cf4 ]()\
    \
    \cf2 for\cf4  number \cf2 in\cf4  numbers \{\
        \cf2 if\cf4  number % \cf7 2\cf4  == \cf7 0\cf4  \{ \cf8 // 
\f1 \'c2\'a6\'bc\'f6\'b8\'e9
\f0 \cf4 \
            result.\cf9 append\cf4 (number+\cf7 1\cf4 )\
            \cf2 continue\cf4 \
        \} \cf2 else\cf4  \{ \cf8 // 
\f1 \'c8\'a6\'bc\'f6\'b8\'e9
\f0 \cf4 \
            \cf2 var\cf4  binary = \cf6 String\cf4 (\cf6 Int\cf4 (number), \cf6 radix\cf4 : \cf7 2\cf4 ).\cf9 map\cf4 \{\cf6 String\cf4 ($0)\}\
            \cf8 // 
\f1 \'c0\'fc\'ba\'ce
\f0  1\cf4 \
            \cf2 if\cf4  binary.\cf9 contains\cf4 (\cf10 "0"\cf4 ) == \cf2 false\cf4  \{\
                binary[\cf7 0\cf4 ] = \cf10 "0"\cf4 \
                binary.\cf9 insert\cf4 (\cf10 "1"\cf4 , \cf9 at\cf4 : \cf7 0\cf4 )\
                \
                \cf2 if\cf4  \cf2 let\cf4  dec = \cf6 Int\cf4 (binary.\cf9 joined\cf4 (), \cf6 radix\cf4 : \cf7 2\cf4 ) \{\
                    result.\cf9 append\cf4 (\cf6 Int64\cf4 (dec))\
                    \cf2 continue\cf4 \
                \}\
            \}\
            \cf8 // 
\f1 \'b1\'d7\'b3\'c9
\f0  
\f1 \'c8\'a6\'bc\'f6
\f0 \cf4 \
            \cf2 for\cf4  i \cf2 in\cf4  \cf7 0\cf4 ..<binary.\cf11 count\cf4  \{\
                 \cf2 if\cf4  binary[binary.count - (i+\cf7 1\cf4 )] == \cf10 "0"\cf4  \{\
                     binary[binary.count - (i+\cf7 1\cf4 )] = \cf10 "1"\cf4 \
                     \cf2 if\cf4  i != \cf7 0\cf4  \{\
                         binary[binary.\cf11 count\cf4  - i] = \cf10 "0"\cf4 \
                     \}\
                     \
                     \cf2 break\cf4 \
                 \}\
            \}\
             \
            \cf2 if\cf4  \cf2 let\cf4  dec = \cf6 Int\cf4 (binary.\cf9 joined\cf4 (), \cf6 radix\cf4 : \cf7 2\cf4 ) \{\
                result.\cf9 append\cf4 (\cf6 Int64\cf4 (dec))\
            \}\
        \}\
    \}\
    \
    \cf2 return\cf4  result\
\}\
\
\
\
}