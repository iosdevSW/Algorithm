{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red161\green103\blue230;\red208\green191\blue105;\red252\green106\blue93;
\red161\green103\blue230;\red108\green121\blue134;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c98912\c41558\c36568;
\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c42394\c47462\c52518;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  n:\cf6 Int\cf4 , \cf5 _\cf4  t:\cf6 Int\cf4 , \cf5 _\cf4  m:\cf6 Int\cf4 , \cf5 _\cf4  p:\cf6 Int\cf4 ) -> \cf7 String\cf4  \{\
    \cf2 var\cf4  seq = \cf8 0\cf4 \
    \cf2 var\cf4  num = \cf8 0\cf4 \
    \cf2 var\cf4  result = \cf9 ""\cf4 \
    \
    \cf2 while\cf4  \cf2 true\cf4 \{\
        \cf2 var\cf4  component = getArray(radix: n, num: num)\
        \
        \cf2 while\cf4  !component.\cf7 isEmpty\cf4  \{\
            \cf2 let\cf4  char = component.\cf10 removeLast\cf4 ()\
            \cf2 if\cf4  seq % m == (p-\cf8 1\cf4 ) \{\
                result += char\
                \cf2 if\cf4  result.\cf7 count\cf4  == t \{ \cf2 return\cf4  result \}\
            \}\
            seq += \cf8 1\cf4 \
        \}\
        num+=\cf8 1\cf4 \
    \}\
    \
    \cf2 return\cf4  result\
\}\
\
\cf11 //
\f1 \'bc\'fd\'c0\'da\'b8\'a6
\f0  
\f1 \'c7\'cf\'b3\'aa\'be\'bf
\f0  
\f1 \'b3\'aa\'b4\'a9\'be\'ee
\f0  
\f1 \'b9\'e8\'bf\'ad\'bf\'a1
\f0  
\f1 \'b4\'e3\'be\'c6
\f0  
\f1 \'b8\'ae\'c5\'cf\'c7\'cf\'b4\'c2
\f0  
\f1 \'c7\'d4\'bc\'f6
\f0 \cf4 \
\cf2 func\cf4  \cf5 getArray\cf4 (\cf5 radix\cf4 : \cf6 Int\cf4 , \cf5 num\cf4 : \cf6 Int\cf4 )->[\cf7 String\cf4 ]\{\
    \cf2 var\cf4  num = num\
    \cf2 var\cf4  array = [\cf7 String\cf4 ]()\
    \cf2 if\cf4  radix == \cf8 10\cf4  \{ \cf11 // 10
\f1 \'c1\'f8\'bc\'f6\'c0\'ce
\f0  
\f1 \'b0\'e6\'bf\'ec
\f0 \cf4 \
        \cf2 while\cf4  num != \cf8 0\cf4  \{\
            array.\cf10 append\cf4 (\cf6 String\cf4 (num % \cf8 10\cf4 ))\
        num /= \cf8 10\cf4 \
        \}\
    \}\cf2 else\cf4 \{\
        \cf2 let\cf4  binary = \cf6 String\cf4 (num, \cf6 radix\cf4 :radix, \cf6 uppercase\cf4 : \cf2 true\cf4 )\
        array = binary.\cf10 map\cf4 \{ \cf6 String\cf4 ($0) \}.\cf10 reversed\cf4 ()\
    \}\
    \
    \cf2 return\cf4  array\
\}\
}