{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red252\green106\blue93;\red208\green191\blue105;\red161\green103\blue230;
}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c63137\c40392\c90196;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  m:\cf6 String\cf4 , \cf5 _\cf4  musicinfos:[\cf6 String\cf4 ]) -> \cf6 String\cf4  \{\
    \cf2 var\cf4  musicTitle = \cf7 "(None)"\cf4 \
    \cf2 var\cf4  time = \cf8 0\cf4 \
    \cf2 let\cf4  m = replace(str: m)\
    \
    \cf2 for\cf4  info \cf2 in\cf4  musicinfos \{\
        \cf2 let\cf4  split = info.\cf9 split\cf4 (\cf9 separator\cf4 :\cf7 ","\cf4 ).\cf9 map\cf4 \{\cf6 String\cf4 ($0)\}\
        \cf2 let\cf4  playTime = returnPlayTime(start: split[\cf8 0\cf4 ], end: split[\cf8 1\cf4 ])\
        \cf2 let\cf4  title = split[\cf8 2\cf4 ]\
        \cf2 let\cf4  melody = replace(str:split[\cf8 3\cf4 ])\
        \
        \cf2 let\cf4  count = (playTime / melody.count) + \cf8 1\cf4 \
        \cf2 let\cf4  repeating = \cf6 String\cf4 .\cf9 init\cf4 (\cf9 repeating\cf4 :melody, \cf9 count\cf4 : count)\
        \cf2 let\cf4  play = repeating.\cf9 prefix\cf4 (playTime)\
        \
        \cf2 if\cf4  play.\cf9 contains\cf4 (m)\{\
            \cf2 if\cf4  time < playTime \{\
                musicTitle = title\
                time = playTime\
            \}\
        \}\
    \}\
    \
    \cf2 return\cf4  musicTitle\
\}\
\
\cf2 func\cf4  \cf5 returnPlayTime\cf4 (\cf5 start\cf4 : \cf6 String\cf4 , \cf5 end\cf4 : \cf6 String\cf4 ) -> \cf6 Int\cf4  \{\
    \cf2 let\cf4  startTime = start.\cf9 split\cf4 (\cf9 separator\cf4 :\cf7 ":"\cf4 ).\cf9 map\cf4 \{\cf6 Int\cf4 (\cf6 String\cf4 ($0))!\}\
    \cf2 let\cf4  endTime = end.\cf9 split\cf4 (\cf9 separator\cf4 :\cf7 ":"\cf4 ).\cf9 map\cf4 \{\cf6 Int\cf4 (\cf6 String\cf4 ($0))!\}\
    \
    \cf2 return\cf4  (endTime[\cf8 0\cf4 ]*\cf8 60\cf4  + endTime[\cf8 1\cf4 ]) - (startTime[\cf8 0\cf4 ]*\cf8 60\cf4  + startTime[\cf8 1\cf4 ])\
\}\
\
\cf2 func\cf4  \cf5 replace\cf4 (\cf5 str\cf4 : \cf6 String\cf4 )->\cf6 String\cf4 \{\
    \cf2 var\cf4  str = str\
    str = str.\cf9 replacingOccurrences\cf4 (\cf9 of\cf4 : \cf7 "A#"\cf4 , \cf9 with\cf4 :\cf7 "a"\cf4 )\
    str = str.\cf9 replacingOccurrences\cf4 (\cf9 of\cf4 : \cf7 "C#"\cf4 , \cf9 with\cf4 :\cf7 "c"\cf4 )\
    str = str.\cf9 replacingOccurrences\cf4 (\cf9 of\cf4 : \cf7 "F#"\cf4 , \cf9 with\cf4 :\cf7 "f"\cf4 )\
    str = str.\cf9 replacingOccurrences\cf4 (\cf9 of\cf4 : \cf7 "D#"\cf4 , \cf9 with\cf4 :\cf7 "d"\cf4 )\
    str = str.\cf9 replacingOccurrences\cf4 (\cf9 of\cf4 : \cf7 "G#"\cf4 , \cf9 with\cf4 :\cf7 "g"\cf4 )\
    \
    \cf2 return\cf4  str\
\}\
}