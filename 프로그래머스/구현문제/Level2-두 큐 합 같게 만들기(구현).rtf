{\rtf1\ansi\ansicpg949\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red208\green191\blue105;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c63232\c40219\c90115;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 import\cf4  Foundation\
\
\cf2 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  queue1:[\cf6 Int\cf4 ], \cf5 _\cf4  queue2:[\cf6 Int\cf4 ]) -> \cf6 Int\cf4  \{\
    \cf2 var\cf4  que = queue1 + queue2\
    \cf2 var\cf4  queHalf = (queue1.reduce(\cf7 0\cf4 ,+) + queue2.reduce(\cf7 0\cf4 ,+)) / \cf7 2\cf4 \
    \
    \cf2 var\cf4  leftPoint = \cf7 0\cf4 \
    \cf2 var\cf4  rightPoint = queue1.\cf8 count\cf4  - \cf7 1\cf4 \
    \cf2 var\cf4  que1Sum = queue1.reduce(\cf7 0\cf4 ,+)\
    \cf2 var\cf4  count = \cf7 0\cf4 \
    \
    \cf2 while\cf4  rightPoint != que.\cf8 count\cf4 -\cf7 1\cf4  && que1Sum != queHalf \{\
        count += \cf7 1\cf4 \
        \cf2 if\cf4  que1Sum < queHalf\{\
            rightPoint += \cf7 1\cf4 \
            que1Sum += que[rightPoint]\
        \} \cf2 else\cf4  \{\
            que1Sum -= que[leftPoint]\
            leftPoint += \cf7 1\cf4 \
        \}\
    \}\
    \cf2 guard\cf4  que1Sum == queHalf \cf2 else\cf4  \{ \cf2 return\cf4  -\cf7 1\cf4  \}\
    \
    \cf2 return\cf4  count\
\}\
}