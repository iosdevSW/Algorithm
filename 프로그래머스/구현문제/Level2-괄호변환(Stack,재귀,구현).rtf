{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red65\green161\blue192;\red208\green168\blue255;\red161\green103\blue230;\red252\green106\blue93;\red108\green121\blue134;
\red208\green191\blue105;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c63232\c40219\c90115;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c42394\c47462\c52518;
\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c63137\c40392\c90196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 import\cf4  Foundation\
\
\cf2 func\cf4  \cf5 solution\cf4 (\cf5 _\cf4  p:\cf6 String\cf4 ) -> \cf7 String\cf4  \{\
    \cf2 if\cf4  p == \cf8 ""\cf4  \{ \cf2 return\cf4  \cf8 ""\cf4 \} \cf9 // 
\f1 \'ba\'f3
\f0  
\f1 \'b9\'ae\'c0\'da\'bf\'ad\'c0\'cf
\f0  
\f1 \'b6\'a7
\f0 \cf4 \
    \cf2 if\cf4  isPerfect(p) \{ \cf2 return\cf4  p\} \cf9 // 
\f1 \'bf\'c3\'b9\'d9\'b8\'a5
\f0  
\f1 \'b0\'fd\'c8\'a3
\f0  
\f1 \'b9\'ae\'c0\'da\'bf\'ad\'c0\'cf
\f0  
\f1 \'b6\'a7
\f0 \cf4 \
    \
    \cf2 return\cf4  recursive(p)\
\}\
\
\cf2 func\cf4  \cf5 recursive\cf4 (\cf5 _\cf4  s: \cf6 String\cf4 )->\cf7 String\cf4 \{\
    \cf2 var\cf4  s = s\
    \cf2 if\cf4  isPerfect(s) \{ \cf9 // 
\f1 \'bf\'c3\'b9\'d9\'b8\'a5
\f0  
\f1 \'b9\'ae\'c0\'da\'bf\'ad\'c0\'cc\'b8\'e9
\f0  
\f1 \'c1\'be\'b7\'e1
\f0 \cf4 \
        \cf2 return\cf4  s\
    \}\
    \cf2 var\cf4  openCount = \cf10 0\cf4 \
    \cf2 var\cf4  closeCount = \cf10 0\cf4 \
    \cf2 var\cf4  totalCount = \cf10 0\cf4 \
    \cf2 for\cf4  char \cf2 in\cf4  s \{\
        \cf2 if\cf4  char == \cf8 "("\cf4  \{ openCount += \cf10 1\cf4 \}\
        \cf2 if\cf4  char == \cf8 ")"\cf4  \{ closeCount += \cf10 1\cf4 \}\
        \
        \cf2 if\cf4  openCount == closeCount \{\
            totalCount = openCount*\cf10 2\cf4 \
            \cf2 break\cf4 \
        \}\
    \}\
    \
    \cf2 var\cf4  u = \cf8 ""\cf4 \
    \cf2 for\cf4  _ \cf2 in\cf4  \cf10 1\cf4 ...totalCount \{\
        u += \cf6 String\cf4 (s.\cf11 removeFirst\cf4 ())\
    \}\
    \cf2 var\cf4  result = \cf8 ""\cf4 \
    \
    \cf9 //u
\f1 \'b0\'a1
\f0  
\f1 \'bf\'c3\'b9\'d9\'b8\'a5
\f0  
\f1 \'b9\'ae\'c0\'da\'bf\'ad\'c0\'cc\'b8\'e9
\f0  v
\f1 \'b8\'a6
\f0  
\f1 \'c0\'e7\'b1\'cd\'c8\'a3\'c3\'e2\'c7\'cf\'bf\'a9
\f0  
\f1 \'c0\'cc\'be\'ee\'ba\'d9\'c0\'d3
\f0 \cf4 \
    \cf2 if\cf4  isPerfect(u) \{\
        \cf2 return\cf4  u + recursive(s)\
    \}\cf2 else\cf4  \{ \cf9 // u
\f1 \'b0\'a1
\f0  
\f1 \'bf\'c3\'b9\'d9\'b8\'a5
\f0  
\f1 \'b9\'ae\'c0\'da\'bf\'ad\'c0\'cc
\f0  
\f1 \'be\'c6\'b4\'cf\'b8\'e9
\f0 \cf4 \
        result += \cf8 "("\cf4  \cf9 // 4-1\cf4 \
        result += recursive(s) \cf9 // 4-2\cf4 \
        result += \cf8 ")"\cf4  \cf9 // 4-3\cf4 \
    \
        u.\cf11 removeFirst\cf4 () \cf9 //4-4\cf4 \
        u.\cf11 removeLast\cf4 () \cf9 //4-4\cf4 \
        \
        \cf2 var\cf4  temp = u.\cf11 replacingOccurrences\cf4 (\cf11 of\cf4 : \cf8 "("\cf4 , \cf11 with\cf4 : \cf8 "."\cf4 )\
        \cf2 var\cf4  temp2 = temp.\cf11 replacingOccurrences\cf4 (\cf11 of\cf4 : \cf8 ")"\cf4 , \cf11 with\cf4 : \cf8 "("\cf4 )\
        \cf2 var\cf4  reversed = temp2.\cf11 replacingOccurrences\cf4 (\cf11 of\cf4 : \cf8 "."\cf4 , \cf11 with\cf4 : \cf8 ")"\cf4 )\
        \
        result += reversed\
    \}\
    \
    \cf2 return\cf4  result\
    \
\}\
\
\cf2 func\cf4  \cf5 isPerfect\cf4 (\cf5 _\cf4  s: \cf6 String\cf4 )->\cf6 Bool\cf4 \{\
    \cf2 var\cf4  stack = [\cf7 String\cf4 ]()\
    \cf2 for\cf4  char \cf2 in\cf4  s \{\
        \cf2 if\cf4  char == \cf8 ")"\cf4  \{\
            \cf2 if\cf4  stack.\cf7 isEmpty\cf4  \{\
                \cf2 return\cf4  \cf2 false\cf4  \cf9 // 
\f1 \'bd\'ba\'c5\'c3\'c0\'cc
\f0  
\f1 \'ba\'f1\'be\'ee\'c0\'d6\'c0\'b8\'b8\'e9
\f0  
\f1 \'bf\'c3\'b9\'d9\'b8\'a5
\f0  
\f1 \'b0\'fd\'c8\'a3
\f0  
\f1 \'b9\'ae\'c0\'da\'bf\'ad
\f0  x\cf4 \
            \}\cf2 else\cf4  \{\
                stack.\cf11 removeLast\cf4 () \cf9 // 
\f1 \'be\'c8\'ba\'f1\'be\'ee\'c0\'d6\'c0\'b8\'b8\'e9
\f0  
\f1 \'c7\'cf\'b3\'aa
\f0  
\f1 \'bb\'a9\'c1\'dc
\f0 \cf4 \
            \}\
        \}\
        \cf2 if\cf4  char == \cf8 "("\cf4 \{\
            stack.\cf11 append\cf4 (\cf6 String\cf4 (char))\
        \}\
    \}\
    \cf2 if\cf4  stack.\cf7 isEmpty\cf4 \{\
        \cf2 return\cf4  \cf2 true\cf4 \
    \}\cf2 else\cf4  \{\
        \cf2 return\cf4  \cf2 false\cf4 \
    \}\
\}\
}