{\rtf1\ansi\ansicpg949\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red108\green121\blue134;\red65\green161\blue192;\red208\green168\blue255;\red161\green103\blue230;\red208\green191\blue105;
\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c81498\c74939\c41233;
\csgenericrgb\c63232\c40219\c90115;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\tx577\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 import\cf4  Foundation\
\cf5 //import Glibc\cf4 \
\
\cf2 public\cf4  \cf2 func\cf4  \cf6 solution\cf4 (\cf6 _\cf4  N : \cf7 Int\cf4 , \cf6 _\cf4  A : \cf2 inout\cf4  [\cf7 Int\cf4 ]) -> [\cf7 Int\cf4 ] \{\
    \cf5 // write your code in Swift 4.2.1 (Linux)\cf4 \
    \cf2 var\cf4  counter = [\cf7 Int\cf4 ].\cf8 init\cf4 (\cf8 repeating\cf4 : \cf9 0\cf4 , \cf8 count\cf4 : N)\
\
    \cf2 for\cf4  i \cf2 in\cf4  \cf9 0\cf4 ..<A.\cf10 \cb3 count\cf4 \cb3  \{\
        \cf2 if\cf4  A[i] == N + \cf9 1\cf4  \{\
             \cf5 // 
\f1 \'b8\'f0\'b5\'e7
\f0  
\f1 \'bf\'f8\'bc\'d2
\f0  max
\f1 \'b0\'aa
\f0  (max counter)\cf4 \
            \cf2 let\cf4  maxValue = counter.\cf8 max\cf4 () ?? \cf9 0\cf4 \
            counter = [\cf7 Int\cf4 ].\cf8 init\cf4 (\cf8 repeating\cf4 : maxValue, \cf8 count\cf4 : N)\
        \}\cf2 else\cf4  \{\
            counter[A[i]-\cf9 1\cf4 ] += \cf9 1\cf4     \cf5 //
\f1 \'c7\'d8\'b4\'e7
\f0  
\f1 \'bf\'f8\'bc\'d2
\f0  
\f1 \'c4\'ab\'bf\'ee\'c6\'ae
\f0 \cf4 \
        \}\
    \}\
    \
    \cf2 return\cf4  counter\
\}\
//
\f1 \'c1\'a4\'c8\'ae\'b5\'b5 100% \'c0\'cc\'c1\'f6\'b8\'b8 \'c5\'ab \'b0\'aa\'c0\'cf\'b6\'a7 \'c8\'bf\'c0\'b2\'bc\'ba\'c0\'cc \'c1\'c1\'c1\'f6 \'be\'ca\'be\'c6 Performance 60% = \'c3\'d1 \'c7\'d5 = 77%\

\f0 // -> 
\f1 \'c3\'d6\'b4\'eb\'b0\'aa\'c0\'bb
\f0  
\f1 \'c0\'fa\'c0\'e5\'c7\'d8\'b5\'d7\'b4\'d9\'b0\'a1
\f0  
\f1 \'c8\'c4
\f0  
\f1 \'c3\'b3\'b8\'ae
\f0 \
\cf2 import\cf4  Foundation\
\cf2 import\cf4  Glibc\
\
\cf2 public\cf4  \cf2 func\cf4  \cf6 solution\cf4 (\cf6 _\cf4  N : \cf7 Int\cf4 , \cf6 _\cf4  A : \cf2 inout\cf4  [\cf7 Int\cf4 ]) -> [\cf7 Int\cf4 ] \{\
    \cf2 var\cf4  counter = [\cf7 Int\cf4 ].\cf8 init\cf4 (\cf8 repeating\cf4 : \cf9 0\cf4 , \cf8 count\cf4 : N)\
    \cf2 var\cf4  setMin = \cf9 0\cf4 \
    \cf2 var\cf4  currentMax = \cf9 0\cf4 \
    \
    \cf2 for\cf4  i \cf2 in\cf4  \cf9 0\cf4 ..<A.\cf10 \cb3 count\cf4 \cb3  \{\
        \cf2 if\cf4  A[i] == N + \cf9 1\cf4  \{\
            \cf5 // 
\f1 \'c7\'f6\'c0\'e7\'b1\'ee\'c1\'f6
\f0  
\f1 \'b0\'a1\'c0\'e5
\f0  
\f1 \'b8\'b9\'c0\'cc
\f0  
\f1 \'c4\'ab\'bf\'ee\'c6\'ae\'b5\'c8
\f0  
\f1 \'bf\'f8\'bc\'d2\'b8\'a6
\f0  
\f1 \'c3\'d6\'bc\'d2\'b0\'aa\'c0\'b8\'b7\'ce
\f0  
\f1 \'c0\'fa\'c0\'e5
\f0 \cf4 \
            setMin = currentMax\
        \}\cf2 else\cf4  \{\
            \cf5 // 
\f1 \'bc\'b3\'c1\'a4\'b5\'c8
\f0  
\f1 \'c3\'d6\'bc\'d2\'b0\'aa\'ba\'b8\'b4\'d9
\f0  
\f1 \'c0\'db\'b4\'d9\'b8\'e9
\f0  
\f1 \'c3\'d6\'bc\'d2\'b0\'aa\'c0\'b8\'b7\'ce
\f0  
\f1 \'bc\'b3\'c1\'a4\'c7\'d8\'c1\'dc
\f0 \cf4 \
            \cf2 if\cf4  setMin > counter[A[i]-\cf9 1\cf4 ] \{\
                counter[A[i]-\cf9 1\cf4 ] = setMin\
            \}\
            \
            counter[A[i]-\cf9 1\cf4 ] += \cf9 1\cf4     \cf5 //
\f1 \'c7\'d8\'b4\'e7
\f0  
\f1 \'bf\'f8\'bc\'d2
\f0  
\f1 \'c4\'ab\'bf\'ee\'c6\'ae
\f0 \cf4 \
            \
            \cf5 // 
\f1 \'bf\'c3\'b6\'f3\'b0\'a3
\f0  
\f1 \'c4\'ab\'bf\'ee\'c5\'cd\'b0\'a1
\f0  
\f1 \'c7\'f6\'c0\'e7
\f0  
\f1 \'c3\'d6\'b4\'eb\'b0\'aa\'ba\'b8\'b4\'d9
\f0  
\f1 \'c5\'a9\'b4\'d9\'b8\'e9
\f0  
\f1 \'b0\'bb\'bd\'c5
\f0 \cf4 \
            \cf2 if\cf4  counter[A[i]-\cf9 1\cf4 ] > currentMax \{\
                currentMax = counter[A[i]-\cf9 1\cf4 ]\
            \}\
        \}\
    \}\
    \cf5 // 
\f1 \'c3\'d6\'bc\'d2\'b0\'aa\'c0\'cc
\f0  
\f1 \'bb\'f5\'b7\'ce
\f0  
\f1 \'bc\'b3\'c1\'a4\'b5\'c8
\f0  
\f1 \'c8\'c4
\f0  
\f1 \'c7\'d1\'b9\'f8\'b5\'b5
\f0  
\f1 \'c4\'ab\'bf\'ee\'c6\'ae
\f0  
\f1 \'b5\'c7\'c1\'f6
\f0  
\f1 \'be\'ca\'c0\'ba
\f0  
\f1 \'bf\'f8\'bc\'d2\'b5\'e9\'c0\'ba
\f0 \cf4 \
    \cf5 // 
\f1 \'bc\'b3\'c1\'a4\'b5\'c8
\f0  
\f1 \'c3\'d6\'bc\'d2\'b0\'aa\'ba\'b8\'b4\'d9
\f0  
\f1 \'c0\'db\'c0\'b8\'b9\'c7\'b7\'ce
\f0  
\f1 \'bc\'b3\'c1\'a4\'b5\'c8
\f0  
\f1 \'c3\'d6\'bc\'d2\'b0\'aa\'c0\'b8\'b7\'ce
\f0  
\f1 \'ba\'af\'b0\'e6\'c7\'cf\'b0\'ed
\f0  
\f1 \'b3\'aa\'b8\'d3\'c1\'f6\'b4\'c2
\f0  
\f1 \'b1\'d7\'b4\'eb\'b7\'ce
\f0  
\f1 \'c3\'e2\'b7\'c2
\f0 \cf4 \
    \cf2 return\cf4  counter.\cf8 map\cf4 \{ $0 < setMin ? setMin: $0\}\
\}\
}